Chapter 4: Inheritance

# Introduction to inheritance in OOP

In Object-Oriented Programming (OOP), inheritance is a key concept that allows programmers to create new classes from existing ones, promoting code reusability and reducing redundancy. Inheritance defines a relationship between two classes: a parent class and a child class. The child class "inherits" all the attributes and behaviors of the parent class and can add new features or override existing ones.

## Defining inheritance

Inheritance is a way to create new classes based on existing ones. The existing class is called the "parent" or "superclass", and the new class is called the "child" or "subclass". The child class inherits all public and protected attributes and methods (functions) of the parent class, and can add or modify its own attributes and methods.

Inheritance is represented in Python by putting the name of the parent class inside parentheses when defining the child class. For example, let's say we have a parent class called Animal:

```python
class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def speak(self):
        print("Hello, I am an animal")
```

We can create a child class called Dog that inherits from Animal:

```python
class Dog(Animal):
    pass
```

Here, we have created a new class called Dog that inherits from the Animal class. The Dog class definition is empty because it does not add any new attributes or methods. However, it already has access to the `__init__` method and the `speak` method defined in the parent Animal class.

## Relationship between parent and child classes

The parent class is also known as the superclass because it is "above" the child class in the inheritance hierarchy. The child class, in turn, is also known as the subclass because it is "below" the parent class.

In programming, this relationship is known as an is-a relationship. For example, a Dog is an Animal, a Bicycle is a Vehicle, and a Circle is a Shape. This means that the child class inherits all the characteristics of the parent class, and can also be treated as an instance of the parent class.

In Python, we can use the `issubclass()` function to check if a class is a subclass of another class:

```python
>>> class Vehicle:
...     pass
...
>>> class Bicycle(Vehicle):
...     pass
...
>>> issubclass(Bicycle, Vehicle)
True
```

Here, we have created a Bicycle class that inherits from the Vehicle class. We can use `issubclass()` to check if Bicycle is a subclass of Vehicle, which returns `True`.

## Subclasses and superclasses

A subclass is a class that inherits from another class. All the attributes and methods of the superclass are automatically available to the subclass. The subclass can then add new attributes and methods or override existing ones.

A superclass is a class that is inherited by other classes. It provides the basic functionality and attributes that can be reused by its subclasses. Superclasses are also known as base classes or parent classes.

Inheritance creates a hierarchy of classes, with the parent-children relationship forming a tree-like structure. The parent class is at the top of the tree, and the child classes are at the bottom. The classes at any level of the hierarchy are related to each other by inheritance.

## Inheritance for code reusability

Inheritance is a powerful tool for code reusability. It reduces the amount of code duplication by allowing classes to inherit the attributes and methods of other classes. If we have several classes with similar attributes and behavior, we can create a common superclass and let the other classes inherit from it.

For example, let's say we want to create a class hierarchy for different types of vehicles. All vehicles have some common attributes such as speed, weight, and capacity. We can create a Vehicle class with these attributes and make different subclasses that inherit from it:

```python
class Vehicle:
    def __init__(self, speed, weight, capacity):
        self.speed = speed
        self.weight = weight
        self.capacity = capacity

class Car(Vehicle):
    def __init__(self, make, model, speed, weight, capacity):
        super().__init__(speed, weight, capacity)
        self.make = make
        self.model = model

class Bicycle(Vehicle):
    def __init__(self, type, speed, weight, capacity):
        super().__init__(speed, weight, capacity)
        self.type = type
```

Here, we have created a Vehicle class with attributes for speed, weight, and capacity. We then created two subclasses called Car and Bicycle. Car adds new attributes for make and model, and Bicycle adds a new attribute for type. By using inheritance, we can reuse the attributes and methods of the Vehicle class in the Car and Bicycle classes, reducing the amount of code we need to write.

Furthermore, if we need to change or add something to the Vehicle class, we only need to do it once, and all its subclasses will inherit the change automatically. This makes our code easier to maintain, as we only need to make changes in one place.

In conclusion, inheritance is a fundamental concept in Object-Oriented Programming that promotes code reusability and reduces redundancy. By defining a parent-child relationship between classes, we can create new classes from existing ones, allowing us to reuse and build upon previously defined attributes and methods.

# Inheriting attributes and methods

Inheritance is one of the core principles of OOP, and it allows us to create new classes that are built on existing classes. Inheritance enables us to reuse code by inheriting attributes and methods from a parent class. This reuse of code helps to reduce code duplication and simplifies code maintenance.

## Inheritance in Python

In Python, a new class can inherit the attributes and methods of an existing class using the **inheritance keyword 'class'**. We can create a new class that inherits from an existing class by including the name of the parent class in parentheses after the name of the new class.

For example, let's consider a class `Person` that has the attributes `name` and `age`. We can create another class, `Employee`, that inherits from the `Person` class, and also has its own attributes, such as `salary`. 

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Employee(Person):
    def __init__(self, name, age, salary):
        super().__init__(name, age)
        self.salary = salary
```

In the above example, the `Employee` class inherits from the `Person` class. The `Employee` class has its constructor and adds the `salary` attribute to the class. Furthermore, we use the `super()` built-in method to call the parent constructor and to inherit its attributes `name` and `age`.

## Accessing parent class attributes and methods

Once a child class has inherited attributes and methods from its parent, it can use them as though they were defined within the child class itself. A child class can also add new attributes and methods or override existing ones. 

Let's modify the parent class `Person` to include a method `print_info()` that prints a person's name and age. This will allow the child class `Employee` to inherit and use the method.

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def print_info(self):
        print(f"{self.name} is {self.age} years old.")

class Employee(Person):
    def __init__(self, name, age, salary):
        super().__init__(name, age)
        self.salary = salary
```

We can then create an instance of the `Employee` class and call the `print_info()` method that belongs to the parent class.

```python
jane = Employee("Jane", 25, 50000)
jane.print_info()
```

Output:
```
Jane is 25 years old.
```

## Avoiding duplicate code

In OOP, one of the main aims is code reuse, and inheritance serves that purpose. However, we should be careful not to duplicate code when we define both parent and child classes. If we do, it can become challenging to maintain and modify the code. 

To prevent code duplication, we can use **refactoring**. Refactoring is the process of reorganizing and optimizing our code without changing its functionality. A useful way to refactor our code is by defining common attributes and methods in a **parent class**.

In the example above, we defined the `Employee` class to inherit the `name` and `age` attributes and the `print_info()` method. However, these attributes and methods are variables and functions that are common to all people, regardless of their professions.

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        
    def print_info(self):
        print(f"{self.name} is {self.age} years old.")

class Employee(Person):
    def __init__(self, salary, *args, **kwargs):
        super().__init__(*args, **kwargs) # reuse parent constructor
        self.salary = salary
```

We created an `Employee` class now that takes advantage of the Person class utilizing the `*args` and `**kwargs` syntax to receive any arguments passed to Person. By reusing the parent `__init__` method, we needn't define the `name` and `age` attributes again.

Through inheritance and refactoring, we reduced duplicate code and improved the code's organization and flexibility, making it easier to maintain and modify code.

## Conclusion

In this sub-chapter, we covered inheritance, one of the fundamental concepts of OOP. We explained how to use inheritance keywords, how child classes can inherit parent attributes and methods, how to override attributes and methods, and the concept of refactoring to avoid code duplication. Lastly, we used examples to illustrate these concepts in Python. By implementing inheritance, we can build complex and unique classes, all the while maintaining the benefits of reusability and simpler code maintenance.

# Overriding Inherited Methods

In Python, inheritance allows us to inherit attributes and methods from a parent class to a child class. Often, we might find that we need to modify the behavior of a method inherited from a parent class in the child class. This can be done by overriding the method in the child class.

## What is Overriding Inheritance?

Overriding inheritance refers to defining a method in a child class that already exists in the parent class. In other words, when a method is defined in a child class with the same name as a method in the parent class, it is said to override the method in the parent class.

The child class can have a modified version of a method that is inherited from the parent class, and this modified method will take precedence over the parent method when called from an object of the child class.

## Changing Behavior of Inherited Methods

When we override an inherited method, we can change its behavior in the child class, but we must make sure that the new behavior is consistent with the original behavior of the method. The method signature must be the same, which means the method name and the number and types of parameters should be the same. This is because the overridden method in the child class must have the same interface as the parent method to maintain compatibility with the rest of the code.

Let's see an example of how to override an inherited method in Python. Suppose we have a class `Animal` with a method called `move()`, which simply prints "moving." We want to create a subclass called `Bird` that inherits from `Animal` but overrides `move()` to print "flying" instead of "moving." 

```python
class Animal:
    def move(self):
        print("Moving")


class Bird(Animal):
    def move(self):
        print("Flying")
```

Now, when we create an instance of `Bird`, we can call the `move()` method, which will print "flying" instead of "moving", which was the default behavior inherited from the `Animal` class.

```python
bird = Bird()
bird.move()  # prints "Flying"
```

## When to Override Methods

Overriding a method is useful when we need to modify the behavior of a method inherited from the parent class. However, it is important to consider whether the modification we want to make is consistent with the original purpose of the method. We should only override a method if there is a valid reason to do so. 

For example, suppose we have a class `Person` with a method `speak()` that simply prints "Hello". We want to create a subclass called `Mime` that inherits from `Person` but overrides the `speak()` method to print nothing.

```python
class Person:
    def speak(self):
        print("Hello")


class Mime(Person):
    def speak(self):
        pass
```

In this case, overriding the `speak()` method in the `Mime` class to do nothing is probably not a good idea since `speak()` is an essential method for `Person`, and we might want to use it in some other way for `Mime`.

Therefore, before overriding a method, it is essential to ensure that it makes sense in the context of the child class and does not break the expected behavior of the method in the parent class.

## When Not to Override Methods

We should avoid overriding methods that are critical to the functioning of the parent class or are part of the public interface of the parent class. Overriding such methods can lead to unexpected behavior and make the code hard to maintain. If we need to modify the behavior of such methods, we can use other techniques such as composition or delegation instead of inheritance.

Thus, we should be cautious when overriding methods and carefully consider whether it is the best way to achieve our desired behavior. 

## Conclusion

In summary, overriding an inherited method refers to defining a method in a child class that already exists in the parent class. This allows us to modify the behavior of the method in the child class while maintaining the original behavior of the method in the parent class. We should only override methods when it makes sense in the context of the child class and does not break the expected behavior of the method in the parent class. We should avoid overriding methods that are critical to the functioning of the parent class or are part of the public interface of the parent class.

# Using super() to access the parent class

Inheritance is a powerful tool in Object-Oriented Programming (OOP) that allows developers to create new classes by inheriting properties and methods from existing ones. However, sometimes you may want to override or extend a method from the parent class while still keeping the original implementation. This is where the `super()` function comes in.

## Understanding super() usage

The `super()` function returns a temporary object of the superclass, which allows you to call its methods even if they have been overridden in the subclass. The syntax for using `super()` is straightforward. Suppose you have a class `Subclass` which subclasses `Parentclass`, and you want to call a method from the parent class.

```python
class Parentclass:
    def some_method(self):
        # implementation

class Subclass(Parentclass):
    def some_method(self):
        super().some_method() # calls the parent method
        # extended implementation
```

In this example, the `super().some_method()` line calls the `some_method()` function from the parent class, and the `extended implementation` is added afterward. This way, the parent method can be called and extended or overridden as necessary.

## Calling methods in the parent class

You can also pass arguments to the parent method via `super()`, just like this:

```python
class Parentclass:
    def some_method(arg1, arg2):
        # implementation

class Subclass(Parentclass):
    def some_method(arg1, arg2):
        super().some_method(arg1, arg2) # calls the parent method
        # extended implementation
```

In this case, the `some_method()` function takes two arguments, `arg1` and `arg2`. By using `super().some_method(arg1, arg2)`, you can call the `some_method()` function of the parent class with the same arguments. 

Note that you do not have to pass the `self` argument to `super()` manually - this is done automatically for you. 

## Limitations of super()

While `super()` is a useful tool in OOP, it does have some limitations. One of the main limitations is that it only works for single inheritance. If a class has multiple parents or inherits from multiple classes, `super()` will work with the first parent listed in the inheritance hierarchy. 

For example, consider a class that inherits from both `ParentA` and `ParentB`, each with its own `some_method()` function.

```python
class ParentA:
    def some_method(self):
        # implementation A

class ParentB:
    def some_method(self):
        # implementation B

class Subclass(ParentA, ParentB):
    def some_method(self):
        super().some_method() # calls ParentA's implementation
```

In this example, the `some_method()` implementation from `ParentA` is called even though the subclass also inherits from `ParentB`. This is because `ParentA` is listed first in the inheritance hierarchy.

## Conclusion

The `super()` function is a powerful tool in OOP that allows you to call overridden or inherited methods from the parent class. Its simple syntax and ease of use make it a valuable tool in Python development. It is important to keep in mind, however, the limitations of the function, such as its single inheritance constraint. With this knowledge, you can use `super()` effectively in your Python projects to create cleaner, more efficient code.

# Benefits and drawbacks of inheritance

Along with the benefits provided by inheritance, there are also some drawbacks that must be considered. In this section, we will discuss both the advantages and disadvantages of using inheritance, and compare it to alternative approaches such as composition and aggregation.

## Benefits of inheritance

The primary benefit of inheritance is that it allows for code reuse. Instead of rewriting code for a new class, we can simply inherit from an existing class and add or override any necessary methods or attributes. This can save a lot of time and effort when building complex class hierarchies.

Another benefit of inheritance is that it allows for easier maintenance of code. By defining behavior in a parent class, any changes made to this behavior will be automatically reflected in all child classes. This makes it easier to modify code and fix bugs.

Inheritance also promotes code organization and encourages code reusability. By grouping related classes together in a hierarchy, it is easier to understand the relationship between the classes and how they interact with each other.

## Drawbacks of inheritance

One of the main disadvantages of inheritance is that it can lead to a rigid and inflexible class hierarchy. If a class is heavily dependent on its parent class, any changes made to the parent class can have unintended consequences on the child class. This can make it difficult to modify or extend the code in the future.

Inheritance can also lead to code duplication, especially if multiple classes inherit from the same parent class. This can make maintenance of the code more difficult and time-consuming.

Another issue with inheritance is that it can violate encapsulation. Child classes have access to all of the attributes and methods of their parent class, which can make it difficult to control access to data and behavior.

## Alternatives to inheritance

There are alternatives to using inheritance, which can provide some of the benefits of inheritance while avoiding some of the drawbacks. One alternative is to use composition, which involves creating objects from other objects. Rather than inheriting from a class, we can include an instance of a class as an attribute of another class.

An advantage of composition is that it provides greater flexibility and allows for more dynamic relationships between objects. It also promotes encapsulation, as the internal workings of an object are hidden from the outside world.

Another alternative is to use aggregation, which is similar to composition but involves creating a "has-a" relationship rather than an "is-a" relationship. Aggregation involves creating a class that contains a collection of objects, rather than inheriting from an existing class.

Aggregation can be useful when we want to group objects together based on some common attribute or behavior, without creating a strict hierarchy. It also promotes encapsulation and allows for greater flexibility in the design of our classes.

## Conclusion

Inheritance is a powerful tool in OOP that can greatly simplify code and promote code reuse. However, it is important to be aware of the potential drawbacks, such as inflexibility and code duplication. By considering alternative approaches such as composition and aggregation, we can create more flexible and maintainable code that better meets the needs of our applications.