Chapter 3

## Introduction to Inheritance

Inheritance is a key concept in Object-Oriented Programming (OOP). It is the process of creating new classes by inheriting properties and characteristics from existing classes. In OOP, inheritance defines an "is-a" relationship between classes, which means that a new class can be created by inheriting properties and methods from a parent or base class.

The concept of inheritance exists to save time and effort in programming by reusing existing code. Rather than writing a new class from scratch, we can inherit from an existing class and add or modify the inherited properties and methods to fit our needs. This saves time and effort by avoiding repetitive coding and promotes a modular coding approach.

Python supports inheritance, making it easier to create new classes from existing ones. The new class is commonly referred to as the child or derived class, while the existing class is the parent or base class. In Python, the child class can inherit all the attributes and behaviors of the parent class, allowing us to reuse the code effectively.

Let's look at an example in real life to understand the concept of inheritance better. Suppose we have a "Vehicle" class, which has attributes like wheels, engine type, and horsepower, and methods like start, stop, and accelerate. Now, we want to create a new "Car" class that has all of the attributes and methods of the "Vehicle" class but also has some additional attributes like the number of doors, the transmission type, etc.

With inheritance, we can create the "Car" class by inheriting all the properties and behaviors of the "Vehicle" class and adding our new attributes and methods to it. This saves us from defining all the attributes and methods of the Car class from scratch, allowing us to create our new class more efficiently.

Inheritance is a fundamental concept in OOP and is widely used in Python programming. We will explore various types of inheritance in the following sections to have a more in-depth understanding of this concept.

# Types of Inheritance

Inheritance is one of the fundamental concepts of object-oriented programming (OOP). Inheritance provides a way to create a new class that is a modified version of an existing class. In Python, there are mainly three types of inheritance, single, multiple, and multilevel inheritance. Let's discuss each type in detail.

## Single Inheritance
Single inheritance is the most common type of inheritance, where a derived class inherits properties and methods of only one base class. The derived class is also called the subclass or child class, and the base class is also called the superclass or parent class. Properties and methods of the base class can be accessed by the derived class. The syntax of single inheritance is shown below:

```python
class BaseClass:
    # properties and methods
    
class DerivedClass(BaseClass):
    # properties and methods
```

Single inheritance is straightforward, and a single derived class can inherit only one parent class. However, if there is a requirement for multiple inheritance, then the multiple and multilevel inheritance concepts are useful.

## Multiple Inheritance
In multiple inheritance, a derived class inherits properties and methods from two or more base classes. The syntax of multiple inheritance is shown below:

```python
class BaseClass1:
    # properties and methods
    
class BaseClass2:
    # properties and methods

class DerivedClass(BaseClass1, BaseClass2):
    # properties and methods
```

Multiple inheritance allows us to reuse code from several classes and combine them in one new class. It enables us to create complex classes by inheriting different attributes from several base classes. There is one significant disadvantage of multiple inheritance, which is the possibility of the diamond problem. The diamond problem occurs when two or more base classes share a common method, and the derived class calls that method. It is challenging to resolve the issue of which superclass's method is to be called.

## Multilevel Inheritance
Multilevel inheritance is a combination of single and multiple inheritance. In multilevel inheritance, a derived class from a base class can become a base class for another derived class. The syntax of multilevel inheritance is shown below:

```python
class BaseClass:
    # properties and methods
    
class DerivedClass1(BaseClass):
    # properties and methods

class DerivedClass2(DerivedClass1):
    # properties and methods
```

The advantage of multilevel inheritance is its simplicity and ease of use. The derived class can inherit properties and methods of all its base classes. Multilevel Inheritance enables code reusability and a better structure of code.

## Advantages and Disadvantages of Inheritance
Inheritance has several advantages, including code reusability, extensibility, and faster code development. Inheritance enables us to define a new class based on existing classes, making it easier to reuse and customize functionality. It also promotes the reuse of code in software development and provides a clear hierarchy of classes, making debugging easier.

However, there are also some disadvantages of inheritance. Inheritance increases tight coupling between a base class and a derived class that makes it difficult to modify the existing base class without affecting the derived class. It can lead to code bloat and complexity, which can create maintenance issues over time.

## Real-world Examples of Inheritance
Inheritance is a fundamental concept in OOP, and it is widely used in real-world applications. Here are some examples that illustrate the use of inheritance in real-life scenarios:

- In a banking system, the Customer class can be derived from the Account class, where the Account class provides basic functionality like opening an account, depositing money, withdrawing money, etc., and the Customer class can inherit those characteristics from the Account class.

- An educational system that has different types of courses like online courses, offline courses, distance learning courses, etc., can use inheritance. Each course type can be a separate class that inherits common properties and methods from the parent class Course.

In summary, inheritance is a powerful tool in Python that enables code reusability and faster code development. Understanding the different types of inheritance and their advantages and disadvantages is crucial to building effective software systems.

# Working with inheritance in practice

Inheritance is one of the essential concepts of object-oriented programming that allows the creation of a new class from an existing class. In the previous chapter, we learned the basics of inheritance, such as parent and child classes, and their relationships. In this section, we will take a deeper dive into inheritance to learn how to use parent and child classes together effectively. 

## Using Parent Class Methods and Attributes in Child Classes

One of the significant benefits of inheritance is that child classes inherit methods and attributes from their parent classes. We can use those methods and attributes in child classes without having to rewrite the entire functionality. 

Let's take an example to demonstrate this concept. Suppose we have a parent class `Shape`. This class has two methods, `area()` and `perimeter()`, and an attribute `color`.

``` python
class Shape:
    def __init__(self, color):
        self.color = color
    
    def area(self):
        pass
    
    def perimeter(self):
        pass
```

Now, we want to create child classes `Circle` and `Rectangle` that inherit `color`, `area()`, and `perimeter()` from the parent `Shape` class. We only need to define the specific functionality for `Circle` and `Rectangle` that makes them different from each other.

``` python
class Circle(Shape):
    def __init__(self, color, radius):
        super().__init__(color)
        self.radius = radius
    
    def area(self):
        return 3.14 * self.radius ** 2
    
    def perimeter(self):
        return 2 * 3.14 * self.radius

class Rectangle(Shape):
    def __init__(self, color, length, width):
        super().__init__(color)
        self.length = length
        self.width = width
    
    def area(self):
        return self.length * self.width
    
    def perimeter(self):
        return 2 * (self.length + self.width)
```

Here, we defined `Circle` and `Rectangle` that extend the `Shape` class. The `Circle` class receives the `color` attribute from the parent class, and it has its implementation of the `area()` and `perimeter()` methods that use `radius` as an input parameter. Similarly, for the `Rectangle` class, it uses `length` and `width` as input parameters to `area()` and `perimeter()` methods. By using inheritance, we can avoid duplicating the code for the `color` attribute and `area()` and `perimeter()` methods.

## Overriding Parent Class Methods

Child classes can override parent class methods if the behavior defined in the parent class is not appropriate for the child class. Overriding methods in child classes is a key feature of inheritance that supports polymorphism.

Let's expand on the previous example to show how to override a method. Suppose we have a parent class `Shape` with a `perimeter()` method that returns a message. We want to override this method in the `Rectangle` class such that it returns an integer value of the perimeter.      

``` python
class Shape:
    def __init__(self, color):
        self.color = color
    
    def area(self):
        pass
    
    def perimeter(self):
        return "Perimeter method in the shape class"

class Rectangle(Shape):
    def __init__(self, color, length, width):
        super().__init__(color)
        self.length = length
        self.width = width
    
    def area(self):
        return self.length * self.width
    
    def perimeter(self):
        return 2 * (self.length + self.width)
```

In the `Rectangle` class, we override `perimeter()` method to return an integer value instead of a message. Here, the implementation of `perimeter()` differs between the parent class and child class, so we need to override the `perimeter()` method to return the appropriate value for the `Rectangle` class.

## Conclusion

We have learned how to use inheritance in Python effectively. By using inheritance, we can create a new child class and inherit methods and attributes from the parent class. Child classes can override parent class methods to provide their implementation. Inheritance improves code reusability and reduces code duplication. Always remember to use inheritance wisely, keeping in mind the principles of object-oriented programming.

# Conclusion

Inheritance is an important concept in object-oriented programming that allows a child class to inherit properties and methods from a parent class. By using inheritance, programmers can reuse code, improve code readability, and simplify code maintenance. 

In this sub-chapter, we have covered the basics of inheritance and the different types of inheritance in Python, such as single, multiple, and multilevel inheritance. We have also seen how inheritance works in practice with real-world examples.

Inheritance is a powerful feature of OOP and should be used judiciously. Although inheritance can make code simpler and more flexible, it can also lead to complex inheritance hierarchies and can make code difficult to understand and maintain.

In conclusion, understanding inheritance is a crucial skill for any programmer, and Python offers an intuitive and flexible way to implement this feature. By mastering inheritance, Python programmers can write cleaner, more readable code that is easier to maintain and extend.