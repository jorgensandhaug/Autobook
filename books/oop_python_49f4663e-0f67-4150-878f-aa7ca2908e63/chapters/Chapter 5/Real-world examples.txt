# Real-world examples

In this sub-chapter, we will demonstrate the use of polymorphism in Python with real-world examples. Polymorphism is a fundamental concept in Object Oriented Programming (OOP), which refers to the ability of objects to take on many forms. Polymorphism allows us to treat different objects in the same way, making code more flexible and reusable.

## Example 1: Shapes

Let's consider a simple example of shapes. We can define a class `Shape` that has a method `area()` to calculate the area of the shape. We can then define different shapes as subclasses of `Shape` and override the `area()` method to calculate the area of each shape.

```python
class Shape:
    def area(self):
        pass

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height
    def area(self):
        return self.width * self.height

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius
    def area(self):
        return 3.14 * (self.radius ** 2)
```

Now we can define different shapes and calculate their areas:

```python
shapes = [Rectangle(2, 3), Circle(5)]
for shape in shapes:
    print(shape.area())
```

This code will output:

```
6
78.5
```

In this example, we demonstrate polymorphism by treating different shapes as objects of the same class `Shape` and calling the `area()` method on each of them. The `area()` method is overridden in the subclasses to calculate the area of each shape.

## Example 2: Animal sounds

Let's consider another example of animal sounds. We can define a class `Animal` that has a method `sound()` to make the sound of the animal. We can then define different animals as subclasses of `Animal` and override the `sound()` method to make the sound of each animal.

```python
class Animal:
    def sound(self):
        pass

class Cat(Animal):
    def sound(self):
        return "Meow"

class Dog(Animal):
    def sound(self):
        return "Woof"
```

Now we can define different animals and make their sounds:

```python
animals = [Cat(), Dog()]
for animal in animals:
    print(animal.sound())
```

This code will output:

```
Meow
Woof
```

In this example, we demonstrate polymorphism by treating different animals as objects of the same class `Animal` and calling the `sound()` method on each of them. The `sound()` method is overridden in the subclasses to make the sound of each animal.

By using polymorphism, we can write more flexible and reusable code that can work with different objects in the same way. This makes our code more maintainable and easier to extend.